# This is a basic workflow to help you get started with Actions
#
name: Build & Push Image

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  # TODO: Change variable to your image's name.
  CONTAINER_REGISTRY_URL: https://registry.hub.docker.com
  REGISTRY_USERID: omearaj  
  IMAGE_NAME: spring-petclinic
  IMAGE_BP_NAME: omearaj/spring-petclinic-bp  
  VERSION: latest
  BP_JVM_VERSION: 8.*  

jobs:

  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    
    - name: Cache local Maven repository
      uses: actions/cache@v2
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-
    
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    
    - uses: actions/checkout@master
    - name: Run Snyk to check for vulnerabilities
      uses: snyk/actions/node@master
      continue-on-error: true
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_API_TOKEN }}
      with:
        command: monitor  
    
    - name: Build with Maven & Snyk
      env:
        SNYK_API_TOKEN: ${{ secrets.SNYK_API_TOKEN }} 
      run: |
        mvn snyk:monitor
        mvn install --file pom.xml -Prun-its
    
    - uses: actions/upload-artifact@v2
      with:
        name: spring-petclinic
        path: ${{ env.github_workspace }}./target/spring-petclinic-2.3.1.BUILD-SNAPSHOT.jar
        if-no-files-found: warn #
        
  # Push image to Container Registry
  push-Docker-Image:
    # Ensure test job passes before pushing image.
    needs: build

    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
      - uses: actions/checkout@v2
      
      - uses: actions/download-artifact@v2
        with:
         name: spring-petclinic
         #path: /usr
    
      - name: Display structure of downloaded files
        run: ls -R
        #working-directory: path/to/artifact
    
      - name: Set env Image Path
        run: echo ::set-env name=IMAGE_PATH::${{ env.REGISTRY_USERID}}/${{ env.IMAGE_NAME}}:${{ env.VERSION }}

      - name: Build image with Docker
        run: docker build . --file Dockerfile --tag $IMAGE_PATH

      - name: Log into registry
        run: echo "${{ secrets.DOCKER_KEY }}" | docker login $CONTAINER_REGISTRY_URL -u $REGISTRY_USERID --password-stdin

      - name: Push image
#        env: 
#          DOCKER_REPO: $REGISTRY_USERID
        run: docker push $IMAGE_PATH
  
  push-CN-Image:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    steps:
      - uses: actions/checkout@v2
      
      - uses: actions/download-artifact@v2
        with:
         name: spring-petclinic
         #path: /usr
    
      - name: Display structure of downloaded files
        run: ls -R
        
      - name: Set env BP Version
        run: echo ::set-env name=BP_JVM_VERSION::${{ env.BP_JVM_VERSION }}
    
      - name: Set env Image Path
        run: echo ::set-env name=IMAGE_BP_PATH::${{ env.REGISTRY_USERID}}/${{ env.IMAGE_NAME}}:${{ env.VERSION }}
      
      - name: Build image with Cloud Native Buildpacks
        env:
          BP_JVM_VERSION: 8.*
        uses: mamezou-tech/buildpacks-action@master
        with:
          image: $IMAGE_BP_NAME
          tag: $VERSION
          path: 'spring-petclinic-2.3.1.BUILD-SNAPSHOT.jar'
          builder: 'gcr.io/paketo-buildpacks/builder:base'
          
      - name: Log into registry
        run: echo "${{ secrets.DOCKER_KEY }}" | docker login $CONTAINER_REGISTRY_URL -u $REGISTRY_USERID --password-stdin
      
      - name: Push image
        run: docker push $IMAGE_BP_PATH
